package com.github.library.flow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.github.library.flow.entity.TrafficDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAFFIC_DETAIL".
*/
public class TrafficDetailDao extends AbstractDao<TrafficDetail, Long> {

    public static final String TABLENAME = "TRAFFIC_DETAIL";

    /**
     * Properties of entity TrafficDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property StartTime = new Property(2, long.class, "startTime", false, "START_TIME");
        public final static Property Uid = new Property(3, int.class, "uid", false, "UID");
        public final static Property UidRX = new Property(4, long.class, "uidRX", false, "UID_RX");
        public final static Property UidTX = new Property(5, long.class, "uidTX", false, "UID_TX");
        public final static Property MobileRX = new Property(6, long.class, "mobileRX", false, "MOBILE_RX");
        public final static Property MobileTX = new Property(7, long.class, "mobileTX", false, "MOBILE_TX");
        public final static Property TotalRX = new Property(8, long.class, "totalRX", false, "TOTAL_RX");
        public final static Property TotalTX = new Property(9, long.class, "totalTX", false, "TOTAL_TX");
        public final static Property Total = new Property(10, long.class, "total", false, "TOTAL");
        public final static Property LastTime = new Property(11, long.class, "lastTime", false, "LAST_TIME");
    }


    public TrafficDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAFFIC_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: startTime
                "\"UID\" INTEGER NOT NULL ," + // 3: uid
                "\"UID_RX\" INTEGER NOT NULL ," + // 4: uidRX
                "\"UID_TX\" INTEGER NOT NULL ," + // 5: uidTX
                "\"MOBILE_RX\" INTEGER NOT NULL ," + // 6: mobileRX
                "\"MOBILE_TX\" INTEGER NOT NULL ," + // 7: mobileTX
                "\"TOTAL_RX\" INTEGER NOT NULL ," + // 8: totalRX
                "\"TOTAL_TX\" INTEGER NOT NULL ," + // 9: totalTX
                "\"TOTAL\" INTEGER NOT NULL ," + // 10: total
                "\"LAST_TIME\" INTEGER NOT NULL );"); // 11: lastTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAFFIC_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrafficDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getUid());
        stmt.bindLong(5, entity.getUidRX());
        stmt.bindLong(6, entity.getUidTX());
        stmt.bindLong(7, entity.getMobileRX());
        stmt.bindLong(8, entity.getMobileTX());
        stmt.bindLong(9, entity.getTotalRX());
        stmt.bindLong(10, entity.getTotalTX());
        stmt.bindLong(11, entity.getTotal());
        stmt.bindLong(12, entity.getLastTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrafficDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getUid());
        stmt.bindLong(5, entity.getUidRX());
        stmt.bindLong(6, entity.getUidTX());
        stmt.bindLong(7, entity.getMobileRX());
        stmt.bindLong(8, entity.getMobileTX());
        stmt.bindLong(9, entity.getTotalRX());
        stmt.bindLong(10, entity.getTotalTX());
        stmt.bindLong(11, entity.getTotal());
        stmt.bindLong(12, entity.getLastTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrafficDetail readEntity(Cursor cursor, int offset) {
        TrafficDetail entity = new TrafficDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.getLong(offset + 2), // startTime
            cursor.getInt(offset + 3), // uid
            cursor.getLong(offset + 4), // uidRX
            cursor.getLong(offset + 5), // uidTX
            cursor.getLong(offset + 6), // mobileRX
            cursor.getLong(offset + 7), // mobileTX
            cursor.getLong(offset + 8), // totalRX
            cursor.getLong(offset + 9), // totalTX
            cursor.getLong(offset + 10), // total
            cursor.getLong(offset + 11) // lastTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrafficDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.getLong(offset + 2));
        entity.setUid(cursor.getInt(offset + 3));
        entity.setUidRX(cursor.getLong(offset + 4));
        entity.setUidTX(cursor.getLong(offset + 5));
        entity.setMobileRX(cursor.getLong(offset + 6));
        entity.setMobileTX(cursor.getLong(offset + 7));
        entity.setTotalRX(cursor.getLong(offset + 8));
        entity.setTotalTX(cursor.getLong(offset + 9));
        entity.setTotal(cursor.getLong(offset + 10));
        entity.setLastTime(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrafficDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrafficDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrafficDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
